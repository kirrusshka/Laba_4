from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, ContextTypes, CallbackQueryHandler
import requests

# –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    # –ö–Ω–æ–ø–∫–∏ –≤ inline-—Ñ–æ—Ä–º–∞—Ç–µ
    keyboard = [
        [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω", callback_data='list_countries')],
        [InlineKeyboardButton("", callback_data='help')],
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    # –û—Ç–≤–µ—Ç —Å –∫–Ω–æ–ø–∫–∞–º–∏
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
        reply_markup=reply_markup
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /country
async def get_country_info(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—Ç—Ä–∞–Ω—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /country.")
        return

    country_name = " ".join(context.args)
    api_url = f"https://restcountries.com/v3.1/name/{country_name}"

    try:
        response = requests.get(api_url)
        response.raise_for_status()
        data = response.json()

        if isinstance(data, list) and len(data) > 0:
            country = data[0]
            name = country.get('name', {}).get('common', 'Unknown')
            capital = country.get('capital', ['Unknown'])[0]
            region = country.get('region', 'Unknown')
            population = country.get('population', 'Unknown')
            area = country.get('area', 'Unknown')

            message = (
                f"üåç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç—Ä–∞–Ω–µ:\n"
                f"–ù–∞–∑–≤–∞–Ω–∏–µ: {name}\n"
                f"–°—Ç–æ–ª–∏—Ü–∞: {capital}\n"
                f"–†–µ–≥–∏–æ–Ω: {region}\n"
                f"–ù–∞—Å–µ–ª–µ–Ω–∏–µ: {population}\n"
                f"–ü–ª–æ—â–∞–¥—å: {area} –∫–º¬≤"
            )
        else:
            message = "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä–∞–Ω–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ."
    except requests.exceptions.RequestException as e:
        message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}"

    await update.message.reply_text(message)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    message = (
        "–í–æ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
        "1. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /country <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã>\n"
        "2. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π '–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.\n\n"
        "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /start."
    )
    
    await update.message.reply_text(message)

# –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    query = update.callback_query
    await query.answer()

    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω"
    if query.data == 'list_countries':
        await query.edit_message_text(
            "–í—ã –º–æ–∂–µ—Ç–µ –≤–≤–µ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—É /country <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã> –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å—Ç—Ä–∞–Ω–µ.\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ö–æ–º–∞–Ω–¥–∞ /help"
    elif query.data == 'help':
        await query.edit_message_text(
            "–í–æ—Ç –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞:\n\n"
            "1. –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—Ç—Ä–∞–Ω–µ, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É: /country <–Ω–∞–∑–≤–∞–Ω–∏–µ_—Å—Ç—Ä–∞–Ω—ã>\n"
            "2. –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–æ–π '–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω' –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Å–∫–∞–∑–æ–∫.\n\n"
            "–ß—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ '–ù–∞–∑–∞–¥'.",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data='back')]
            ])
        )
    # –û—Ç–≤–µ—Ç –Ω–∞ –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    elif query.data == 'back':
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await query.edit_message_text(
            "–ü—Ä–∏–≤–µ—Ç! –Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ª—é–±–æ–π —Å—Ç—Ä–∞–Ω–µ. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –Ω–∏–∂–µ:",
            reply_markup=InlineKeyboardMarkup([
                [InlineKeyboardButton("–°–ø–∏—Å–æ–∫ —Å—Ç—Ä–∞–Ω", callback_data='list_countries')],
                [InlineKeyboardButton("–ü–æ–¥—Å–∫–∞–∑–∫–∞", callback_data='help')]
            ])
        )

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –±–æ—Ç–∞
def main() -> None:
    application = Application.builder().token("7585280502:AAEMW9wBbBJ9E6C1PTB4bFvuj8_680Y9oLM").build()

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("country", get_country_info))
    application.add_handler(CommandHandler("help", help_command))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /help
    application.add_handler(CallbackQueryHandler(button))  # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏

    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    application.run_polling()

if __name__ == "__main__":
    main()
